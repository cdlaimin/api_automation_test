"""
Django settings for AutoTest_New project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import socket
import time

from celery import platforms
from celery.schedules import crontab

from Config.case_config import father_path
from RootDirectory import PROJECT_PATH

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '397&lbb2x0%^*!g&l@ga_s*pwc!6m6t4&cjjhu%y(&ta^lf_rx'

# SECURITY WARNING: don't run with debug turned on in production!
# 环境
# environment = "rd"
#
# environment = "pub"

environment = "prod"
if environment == "rd":
    DEBUG = True

    STATIC_URL = '/static/'

    FATHER_PATH = father_path + "/static/"

    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
        PROJECT_PATH
    ]
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'testlocal',
            'USER': 'root',
            'PASSWORD': '123456',
            'HOST': '172.16.168.132',
            'PORT': '3306',
        }
    }
elif environment == "pub":
    DEBUG = True

    STATIC_URL = '/static/'

    FATHER_PATH = father_path + "/static/"

    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
        PROJECT_PATH
    ]
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'test_platform',
            'USER': 'root',
            'PASSWORD': '123456',
            'HOST': '172.16.168.132',
            'PORT': '3306',
        }
    }

elif environment == "prod":
    DEBUG = False

    STATIC_URL = '/static/'

    STATIC_ROOT = os.path.join(BASE_DIR, "static")

    FATHER_PATH = father_path + "/static/"

    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "/static/"),
        PROJECT_PATH
    ]
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'test_platform',
            'USER': 'root',
            'PASSWORD': '123456',
            'HOST': 'auto_mysql',
            'PORT': '3306',
        }
    }

else:
    print("请选择测试环境")
    os._exit(0)


ALLOWED_HOSTS = ["*"]

# Application definition

platforms.C_FORCE_ROOT = True

INSTALLED_APPS = [
    'channels',
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api_test.apps.ApiTestConfig',
    'tools.apps.ToolsConfig',
    'UserInfo.apps.UserinfoConfig',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'djcelery',
    'backend'
    # 'Ui_test',
    # 'tools',
    # 'UserInfo',
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic',
        }
    },
    'USE_SESSION_AUTH': True,
    # 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    # 'DOC_EXPANSION': None,
    # 'SHOW_REQUEST_HEADERS':True,
    # 'USE_SESSION_AUTH': True,
    # 'DOC_EXPANSION': 'list',
    # 接口文档中方法列表以首字母升序排列
    'APIS_SORTER': 'alpha',
    # 如果支持json提交, 则接口文档中包含json输入框
    'JSON_EDITOR': False,
    # 方法列表字母排序
    'OPERATIONS_SORTER': 'alpha',
    'VALIDATOR_URL': None,
}

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        # 'api_test.utils.permissions.CustomPermission'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'api_test.utils.auth.ExpiringTokenAuthentication'
    ),
    'DEFAULT_PAGINATION_CLASS': (
        'rest_framework.pagination.PageNumberPagination',
    ),
    'EXCEPTION_HANDLER': (
        'api_test.utils.common.custom_exception_handler'
        # 'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'
    )
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ASGI_APPLICATION = 'AutoTest_New.routing.application'

ROOT_URLCONF = 'AutoTest_New.urls'


# 关闭登录页粒子动画
# SIMPLEUI_LOGIN_PARTICLES = False

# 登陆logo
SIMPLEUI_LOGO = '/image/街电.jpg'

# 首页logo
SIMPLEUI_LOGO_INDEX = '/image/J.jpg'

# 自定义图标  图标地址 https://fontawesome.com/icons
SIMPLEUI_ICON = {
    '接口自动化管理': 'fab fa-quinscape',
    '项目管理': 'fas fa-project-diagram',
    '分组管理': 'fas fa-sitemap',
    '接口管理': 'fas fa-link',
    '用例管理': 'fas fa-suitcase',
    '用例Step管理': 'fas fa-shoe-prints',
    'HOST管理': 'fab fa-internet-explorer',
    '全局变量管理': 'fas fa-globe',
    '认证令牌': 'fas fa-key',
    '令牌': 'fas fa-key',
    'Djcelery': 'fas fa-tasks',
    'Tasks': 'fas fa-tasks',
    'Workers': 'fas fa-user-md',
    'Intervals': 'far fa-clock',
    'Crontabs': 'fas fa-tasks',
    "驱动库s": 'fas fa-code',
    "测试报告管理": 'fas fa-envelope-open-text',
    "SQL管理": 'fas fa-wave-square',
    '项目动态': "fas fa-bacon"
}
# 首页报告问题
SIMPLEUI_HOME_INFO = False

SIMPLEUI_STATIC_OFFLINE = True


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['/templates', os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AutoTest_New.wsgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": ["redis://auto_redis:6379/0"],
        },
    },
}

# 缓存
CACHES = {
    "default": {
        # 本地内存缓存
        # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # # 如果你只有一个本地内存缓存，你可以忽略这个设置；
        # # 如果你有多个的时候，你需要至少给他们中一个赋予名字以区分他们;
        # 'LOCATION': 'unique-snowflake'
        # redis缓存
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://auto_redis:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

# TIME_ZONE = 'UTC'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# 跨域忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    '*'
)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
import djcelery
djcelery.setup_loader()  # 加载djcelery

CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# 允许的格式
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'yaml']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

BROKER_URL = 'amqp://guest:guest@auto_mq:5672/'
# BROKER_URL = 'redis://127.0.0.1:6379/0'     # redis作为中间件
# BROKER_TRANSPORT = 'redis'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
# CELERY_BROKER_URL = 'redis://127.0.0.1:6379/1'  # 使用rabbitmq做为消息队列
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/2'  # 使用database作为结果存储
# BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 18000}

# 定时任务
CELERYBEAT_SCHEDULE = {
    'celery_delete_history': {
        "task": "api_test.tasks.celery_delete_history",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
    'celery_delete_index': {
        "task": "api_test.tasks.celery_delete_index",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
    'celery_catalogue_compensation': {
        "task": "api_test.tasks.catalogue_compensation",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
    'celery_del_photo': {
        "task": "api_test.tasks.del_photo",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
    'celery_sql_history': {
        "task": "tools.tasks.delete_sql_history",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
    'delete_script_other': {
        "task": "tools.tasks.delete_script_other",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
    'delete_library_history': {
        "task": "tools.tasks.delete_library_history",
        "schedule": crontab(minute="0", hour="0"),
        "args": (),
    },
}

data_time = time.strftime('%Y-%m-%d', time.localtime(time.time()))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}
        # 日志格式
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/{}_success.log'.format(data_time)),
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/{}_request.log'.format(data_time)),
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'scprits_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/{}_script.log'.format(data_time)),
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': True
        },
        'AutoTest_New.app': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': True
        },
        'AutoTest_New': {
            'handlers': ['scprits_handler', 'console'],
            'level': 'DEBUG',
            'propagate': True
        },
        'scripts': {
            'handlers': ['scprits_handler', 'console'],
            'level': 'DEBUG',
            'propagate': True
        },
    }
}
